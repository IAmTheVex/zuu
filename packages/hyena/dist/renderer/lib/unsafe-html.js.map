{"version":3,"file":"unsafe-html.js","sourceRoot":"","sources":["../../../src/renderer/lib/unsafe-html.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,SAAS,EAAyB,MAAM,SAAS,CAAC;AAE9E,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,KAAU,EAAyB,EAAE,CAC9D,SAAS,CACP,CAAC,IAAc,EAAQ,EAAE;IACvB,IAAI,IAAI,CAAC,cAAc,KAAK,KAAK,IAAI,iBAAiB,CAAC,KAAK,CAAC,EAAE;QAC7D,OAAO;KACR;IACD,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;IAC/C,GAAG,CAAC,SAAS,GAAG,KAAK,CAAC;IACtB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;IACtD,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;AAC9B,CAAC,CACF,CAAC","sourcesContent":["import { _isPrimitiveValue, directive, DirectiveFn, NodePart } from \"../core\";\n\nexport const unsafeHTML = (value: any): DirectiveFn<NodePart> =>\n  directive(\n    (part: NodePart): void => {\n      if (part._previousValue === value && _isPrimitiveValue(value)) {\n        return;\n      }\n      const tmp = document.createElement(\"template\");\n      tmp.innerHTML = value;\n      part.setValue(document.importNode(tmp.content, true));\n      part._previousValue = value;\n    }\n  );\n"]}