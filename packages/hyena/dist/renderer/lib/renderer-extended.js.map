{"version":3,"file":"renderer-extended.js","sourceRoot":"","sources":["../../../src/renderer/lib/renderer-extended.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,aAAa,EACb,mBAAmB,EAEnB,iBAAiB,EAGjB,cAAc,EACf,MAAM,SAAS,CAAC;AACjB,OAAO,EAAE,oBAAoB,EAAE,SAAS,EAAE,YAAY,EAAE,MAAM,aAAa,CAAC;AAE5E,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AACjC,OAAO,EAAE,oBAAoB,EAAE,SAAS,EAAE,YAAY,EAAE,MAAM,aAAa,CAAC;AAE5E,MAAM,CAAC,MAAM,IAAI,GAAG,CAAC,OAA6B,EAAE,GAAG,MAAa,EAAE,EAAE,CACtE,IAAI,cAAc,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,oBAAoB,CAAC,CAAC;AAEpE,MAAM,CAAC,MAAM,GAAG,GAAG,CAAC,OAA6B,EAAE,GAAG,MAAa,EAAE,EAAE,CACrE,IAAI,iBAAiB,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,oBAAoB,CAAC,CAAC;AAEtE,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAClC,QAA0B,EAC1B,YAA0B,EAC1B,IAAU,EACJ,EAAE;IACR,IAAI,YAAY,CAAC,IAAI,KAAK,WAAW,EAAE;QACrC,IAAI,YAAY,CAAC,OAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,EAAE;YAChD,MAAM,SAAS,GAAG,YAAY,CAAC,OAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACjD,OAAO,IAAI,SAAS,CAAC,QAAQ,EAAE,IAAe,EAAE,SAAS,CAAC,CAAC;SAC5D;QACD,MAAM,QAAQ,GAAG,YAAY,CAAC,IAAK,CAAC,MAAM,CAAC,YAAY,CAAC,IAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC1E,IAAI,QAAQ,KAAK,GAAG,EAAE;YACpB,MAAM,IAAI,GAAG,YAAY,CAAC,IAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC7C,OAAO,IAAI,aAAa,CACtB,QAAQ,EACR,IAAe,EACf,IAAI,EACJ,YAAY,CAAC,OAAQ,CACtB,CAAC;SACH;QACD,IAAI,QAAQ,KAAK,GAAG,EAAE;YACpB,MAAM,IAAI,GAAG,YAAY,CAAC,IAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC7C,OAAO,IAAI,oBAAoB,CAC7B,QAAQ,EACR,IAAe,EACf,IAAI,EACJ,YAAY,CAAC,OAAQ,CACtB,CAAC;SACH;QACD,OAAO,IAAI,YAAY,CACrB,QAAQ,EACR,IAAe,EACf,YAAY,CAAC,OAAQ,EACrB,YAAY,CAAC,OAAQ,CACtB,CAAC;KACH;IACD,OAAO,mBAAmB,CAAC,QAAQ,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;AAC3D,CAAC,CAAC","sourcesContent":["import {\n  AttributePart,\n  defaultPartCallback,\n  Part,\n  SVGTemplateResult,\n  TemplateInstance,\n  TemplatePart,\n  TemplateResult\n} from \"../core\";\nimport { BooleanAttributePart, EventPart, PropertyPart } from \"../renderer\";\n\nexport { render } from \"../core\";\nexport { BooleanAttributePart, EventPart, PropertyPart } from \"../renderer\";\n\nexport const html = (strings: TemplateStringsArray, ...values: any[]) =>\n  new TemplateResult(strings, values, \"html\", extendedPartCallback);\n\nexport const svg = (strings: TemplateStringsArray, ...values: any[]) =>\n  new SVGTemplateResult(strings, values, \"svg\", extendedPartCallback);\n\nexport const extendedPartCallback = (\n  instance: TemplateInstance,\n  templatePart: TemplatePart,\n  node: Node\n): Part => {\n  if (templatePart.type === \"attribute\") {\n    if (templatePart.rawName!.substr(0, 3) === \"on-\") {\n      const eventName = templatePart.rawName!.slice(3);\n      return new EventPart(instance, node as Element, eventName);\n    }\n    const lastChar = templatePart.name!.substr(templatePart.name!.length - 1);\n    if (lastChar === \"$\") {\n      const name = templatePart.name!.slice(0, -1);\n      return new AttributePart(\n        instance,\n        node as Element,\n        name,\n        templatePart.strings!\n      );\n    }\n    if (lastChar === \"?\") {\n      const name = templatePart.name!.slice(0, -1);\n      return new BooleanAttributePart(\n        instance,\n        node as Element,\n        name,\n        templatePart.strings!\n      );\n    }\n    return new PropertyPart(\n      instance,\n      node as Element,\n      templatePart.rawName!,\n      templatePart.strings!\n    );\n  }\n  return defaultPartCallback(instance, templatePart, node);\n};\n"]}