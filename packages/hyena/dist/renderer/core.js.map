{"version":3,"file":"core.js","sourceRoot":"","sources":["../../src/renderer/core.ts"],"names":[],"mappings":"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","sourcesContent":["export const templateCaches = new Map<\n  string,\n  Map<TemplateStringsArray, Template>\n>();\n\nexport const html = (strings: TemplateStringsArray, ...values: any[]) =>\n  new TemplateResult(strings, values, \"html\");\n\nexport const svg = (strings: TemplateStringsArray, ...values: any[]) =>\n  new SVGTemplateResult(strings, values, \"svg\");\n\nexport class TemplateResult {\n  strings: TemplateStringsArray;\n  values: any[];\n  type: string;\n  partCallback: PartCallback;\n\n  constructor(\n    strings: TemplateStringsArray,\n    values: any[],\n    type: string,\n    partCallback: PartCallback = defaultPartCallback\n  ) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.partCallback = partCallback;\n  }\n\n  getHTML(): string {\n    const l = this.strings.length - 1;\n    let html = \"\";\n    let isTextBinding = true;\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      html += s;\n      const close = s.lastIndexOf(\">\");\n\n      isTextBinding =\n        (close > -1 || isTextBinding) && s.indexOf(\"<\", close + 1) === -1;\n      html += isTextBinding ? nodeMarker : marker;\n    }\n    html += this.strings[l];\n    return html;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement(\"template\");\n    template.innerHTML = this.getHTML();\n    return template;\n  }\n}\n\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\nexport function defaultTemplateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = new Map<TemplateStringsArray, Template>();\n    templateCaches.set(result.type, templateCache);\n  }\n  let template = templateCache.get(result.strings);\n  if (template === undefined) {\n    template = new Template(result, result.getTemplateElement());\n    templateCache.set(result.strings, template);\n  }\n  return template;\n}\n\nexport type TemplateContainer = (Element | DocumentFragment) & {\n  __templateInstance?: TemplateInstance;\n};\n\nexport function render(\n  result: TemplateResult,\n  container: Element | DocumentFragment,\n  templateFactory: TemplateFactory = defaultTemplateFactory\n) {\n  const template = templateFactory(result);\n  let instance = (container as TemplateContainer).__templateInstance;\n\n  if (\n    instance !== undefined &&\n    instance.template === template &&\n    instance._partCallback === result.partCallback\n  ) {\n    instance.update(result.values);\n    return;\n  }\n\n  instance = new TemplateInstance(\n    template,\n    result.partCallback,\n    templateFactory\n  );\n  (container as TemplateContainer).__templateInstance = instance;\n\n  const fragment = instance._clone();\n\n  removeNodes(container, container.firstChild);\n  container.appendChild(fragment);\n\n  instance.update(result.values);\n}\n\nconst marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\nconst nodeMarker = `<!--${marker}-->`;\n\nconst markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\nconst lastAttributeNameRegex = /[ \\x09\\x0a\\x0c\\x0d]([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)[ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*)$/;\n\nexport class TemplatePart {\n  constructor(\n    public type: string,\n    public index: number,\n    public name?: string,\n    public strings?: string[]\n  ) {}\n\n  get rawName(): string | undefined {\n    return this.name;\n  }\n}\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\nexport class Template {\n  parts: TemplatePart[] = [];\n  element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n    let index = -1;\n    let partIndex = 0;\n    const nodesToRemove: Node[] = [];\n\n    const _prepareTemplate = (template: HTMLTemplateElement) => {\n      const content = template.content;\n\n      const walker = document.createTreeWalker(\n        content,\n        133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n                  NodeFilter.SHOW_TEXT */,\n        null as any,\n        false\n      );\n\n      let previousNode: Node | undefined;\n      let currentNode: Node | undefined;\n\n      while (walker.nextNode()) {\n        index++;\n        previousNode = currentNode;\n        const node = (currentNode = walker.currentNode as Element);\n        if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n          if (node.hasAttributes()) {\n            const attributes = node.attributes;\n            let count = 0;\n            for (let i = 0; i < attributes.length; i++) {\n              if (attributes[i].value.indexOf(marker) >= 0) {\n                count++;\n              }\n            }\n            while (count-- > 0) {\n              const stringForPart = result.strings[partIndex];\n              const attributeNameInPart = lastAttributeNameRegex.exec(\n                stringForPart\n              )![1];\n\n              const attributeLookupName = /^[a-zA-Z-]*$/.test(\n                attributeNameInPart\n              )\n                ? attributeNameInPart\n                : attributeNameInPart.toLowerCase();\n              const attributeValue = node.getAttribute(attributeLookupName)!;\n              const stringsForAttributeValue = attributeValue.split(\n                markerRegex\n              );\n              this.parts.push(\n                new TemplatePart(\n                  \"attribute\",\n                  index,\n                  attributeNameInPart,\n                  stringsForAttributeValue\n                )\n              );\n              node.removeAttribute(attributeLookupName);\n              partIndex += stringsForAttributeValue.length - 1;\n            }\n          }\n          if (node.tagName === \"TEMPLATE\") {\n            _prepareTemplate(node as HTMLTemplateElement);\n          }\n        } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n          const nodeValue = node.nodeValue!;\n          if (nodeValue.indexOf(marker) < 0) {\n            continue;\n          }\n\n          const parent = node.parentNode!;\n          const strings = nodeValue.split(markerRegex);\n          const lastIndex = strings.length - 1;\n\n          partIndex += lastIndex;\n\n          for (let i = 0; i < lastIndex; i++) {\n            parent.insertBefore(\n              strings[i] === \"\"\n                ? document.createComment(\"\")\n                : document.createTextNode(strings[i]),\n              node\n            );\n            this.parts.push(new TemplatePart(\"node\", index++));\n          }\n          parent.insertBefore(\n            strings[lastIndex] === \"\"\n              ? document.createComment(\"\")\n              : document.createTextNode(strings[lastIndex]),\n            node\n          );\n          nodesToRemove.push(node);\n        } else if (\n          node.nodeType === 8 /* Node.COMMENT_NODE */ &&\n          node.nodeValue === marker\n        ) {\n          const parent = node.parentNode!;\n          const previousSibling = node.previousSibling;\n          if (\n            previousSibling === null ||\n            previousSibling !== previousNode ||\n            previousSibling.nodeType !== Node.TEXT_NODE\n          ) {\n            parent.insertBefore(document.createComment(\"\"), node);\n          } else {\n            index--;\n          }\n          this.parts.push(new TemplatePart(\"node\", index++));\n          nodesToRemove.push(node);\n          if (node.nextSibling === null) {\n            parent.insertBefore(document.createComment(\"\"), node);\n          } else {\n            index--;\n          }\n          currentNode = previousNode;\n          partIndex++;\n        }\n      }\n    };\n    _prepareTemplate(element);\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\nexport const getValue = (part: Part, value: any) => {\n  if (isDirective(value)) {\n    value = value(part);\n    return noChange;\n  }\n  return value === null ? undefined : value;\n};\n\nexport interface DirectiveFn<P = Part> {\n  (part: P): void;\n  __litDirective?: true;\n}\n\nexport const directive = <P = Part>(f: DirectiveFn<P>): DirectiveFn<P> => {\n  f.__litDirective = true;\n  return f;\n};\n\nconst isDirective = (o: any) =>\n  typeof o === \"function\" && o.__litDirective === true;\n\nexport const noChange = {};\n\nexport { noChange as directiveValue };\n\nexport const _isPrimitiveValue = (value: any) =>\n  value === null || !(typeof value === \"object\" || typeof value === \"function\");\n\nexport interface Part {\n  instance: TemplateInstance;\n  size?: number;\n}\n\nexport interface SinglePart extends Part {\n  setValue(value: any): void;\n}\n\nexport interface MultiPart extends Part {\n  setValue(values: any[], startIndex: number): void;\n}\n\nexport class AttributePart implements MultiPart {\n  instance: TemplateInstance;\n  element: Element;\n  name: string;\n  strings: string[];\n  size: number;\n  _previousValues: any;\n\n  constructor(\n    instance: TemplateInstance,\n    element: Element,\n    name: string,\n    strings: string[]\n  ) {\n    this.instance = instance;\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.size = strings.length - 1;\n\n    this._previousValues = [];\n  }\n\n  protected _interpolate(values: any[], startIndex: number) {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    let text = \"\";\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const v = getValue(this, values[startIndex + i]);\n      if (\n        v &&\n        v !== noChange &&\n        (Array.isArray(v) || (typeof v !== \"string\" && v[Symbol.iterator]))\n      ) {\n        for (const t of v) {\n          text += t;\n        }\n      } else {\n        text += v;\n      }\n    }\n    return text + strings[l];\n  }\n\n  protected _equalToPreviousValues(values: any[], startIndex: number) {\n    if (this._previousValues.length === 0) {\n      return false;\n    }\n    for (let i = startIndex; i < startIndex + this.size; i++) {\n      if (\n        this._previousValues[i] !== values[i] ||\n        !_isPrimitiveValue(values[i])\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  setValue(values: any[], startIndex: number): void {\n    if (this._equalToPreviousValues(values, startIndex)) {\n      return;\n    }\n    const s = this.strings;\n    let value: any;\n    if (s.length === 2 && s[0] === \"\" && s[1] === \"\") {\n      value = getValue(this, values[startIndex]);\n      if (Array.isArray(value)) {\n        value = value.join(\"\");\n      }\n    } else {\n      value = this._interpolate(values, startIndex);\n    }\n    if (value !== noChange) {\n      this.element.setAttribute(this.name, value);\n    }\n    this._previousValues = values;\n  }\n}\n\nexport class NodePart implements SinglePart {\n  instance: TemplateInstance;\n  startNode: Node;\n  endNode: Node;\n  _previousValue: any;\n\n  constructor(instance: TemplateInstance, startNode: Node, endNode: Node) {\n    this.instance = instance;\n    this.startNode = startNode;\n    this.endNode = endNode;\n    this._previousValue = undefined;\n  }\n\n  setValue(value: any): void {\n    value = getValue(this, value);\n    if (value === noChange) {\n      return;\n    }\n    if (_isPrimitiveValue(value)) {\n      if (value === this._previousValue) {\n        return;\n      }\n      this._setText(value);\n    } else if (value instanceof TemplateResult) {\n      this._setTemplateResult(value);\n    } else if (value instanceof Node) {\n      this._setNode(value);\n    } else if (Array.isArray(value) || value[Symbol.iterator]) {\n      this._setIterable(value);\n    } else if (value.then !== undefined) {\n      this._setPromise(value);\n    } else {\n      this._setText(value);\n    }\n  }\n\n  private _insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private _setNode(value: Node): void {\n    if (this._previousValue === value) {\n      return;\n    }\n    this.clear();\n    this._insert(value);\n    this._previousValue = value;\n  }\n\n  private _setText(value: string): void {\n    const node = this.startNode.nextSibling!;\n    value = value === undefined ? \"\" : value;\n    if (\n      node === this.endNode.previousSibling &&\n      node.nodeType === Node.TEXT_NODE\n    ) {\n      node.textContent = value;\n    } else {\n      this._setNode(document.createTextNode(value));\n    }\n    this._previousValue = value;\n  }\n\n  private _setTemplateResult(value: TemplateResult): void {\n    const template = this.instance._getTemplate(value);\n    let instance: TemplateInstance;\n    if (this._previousValue && this._previousValue.template === template) {\n      instance = this._previousValue;\n    } else {\n      instance = new TemplateInstance(\n        template,\n        this.instance._partCallback,\n        this.instance._getTemplate\n      );\n      this._setNode(instance._clone());\n      this._previousValue = instance;\n    }\n    instance.update(value.values);\n  }\n\n  private _setIterable(value: any): void {\n    if (!Array.isArray(this._previousValue)) {\n      this.clear();\n      this._previousValue = [];\n    }\n\n    const itemParts = this._previousValue as any[];\n    let partIndex = 0;\n\n    for (const item of value) {\n      let itemPart = itemParts[partIndex];\n\n      if (itemPart === undefined) {\n        let itemStart = this.startNode;\n\n        if (partIndex > 0) {\n          const previousPart = itemParts[partIndex - 1];\n          itemStart = previousPart.endNode = document.createTextNode(\"\");\n          this._insert(itemStart);\n        }\n        itemPart = new NodePart(this.instance, itemStart, this.endNode);\n        itemParts.push(itemPart);\n      }\n      itemPart.setValue(item);\n      partIndex++;\n    }\n\n    if (partIndex === 0) {\n      this.clear();\n      this._previousValue = undefined;\n    } else if (partIndex < itemParts.length) {\n      const lastPart = itemParts[partIndex - 1];\n      itemParts.length = partIndex;\n      this.clear(lastPart.endNode.previousSibling!);\n      lastPart.endNode = this.endNode;\n    }\n  }\n\n  private _setPromise(value: Promise<any>): void {\n    this._previousValue = value;\n    value.then((v: any) => {\n      if (this._previousValue === value) {\n        this.setValue(v);\n      }\n    });\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n      this.startNode.parentNode!,\n      startNode.nextSibling!,\n      this.endNode\n    );\n  }\n}\n\nexport type PartCallback = (\n  instance: TemplateInstance,\n  templatePart: TemplatePart,\n  node: Node\n) => Part;\n\nexport const defaultPartCallback = (\n  instance: TemplateInstance,\n  templatePart: TemplatePart,\n  node: Node\n): Part => {\n  if (templatePart.type === \"attribute\") {\n    return new AttributePart(\n      instance,\n      node as Element,\n      templatePart.name!,\n      templatePart.strings!\n    );\n  } else if (templatePart.type === \"node\") {\n    return new NodePart(instance, node, node.nextSibling!);\n  }\n  throw new Error(`Unknown part type ${templatePart.type}`);\n};\n\nexport class TemplateInstance {\n  _parts: Array<Part | undefined> = [];\n  _partCallback: PartCallback;\n  _getTemplate: TemplateFactory;\n  template: Template;\n\n  constructor(\n    template: Template,\n    partCallback: PartCallback,\n    getTemplate: TemplateFactory\n  ) {\n    this.template = template;\n    this._partCallback = partCallback;\n    this._getTemplate = getTemplate;\n  }\n\n  update(values: any[]) {\n    let valueIndex = 0;\n    for (const part of this._parts) {\n      if (!part) {\n        valueIndex++;\n      } else if (part.size === undefined) {\n        (part as SinglePart).setValue(values[valueIndex]);\n        valueIndex++;\n      } else {\n        (part as MultiPart).setValue(values, valueIndex);\n        valueIndex += part.size;\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    const fragment = this.template.element.content.cloneNode(\n      true\n    ) as DocumentFragment;\n    const parts = this.template.parts;\n    let partIndex = 0;\n    let nodeIndex = 0;\n\n    const _prepareInstance = (fragment: DocumentFragment) => {\n      const walker = document.createTreeWalker(\n        fragment,\n        133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n                NodeFilter.SHOW_TEXT */,\n        null as any,\n        false\n      );\n\n      let node = walker.nextNode();\n      while (partIndex < parts.length && node !== null) {\n        const part = parts[partIndex];\n        if (!isTemplatePartActive(part)) {\n          this._parts.push(undefined);\n          partIndex++;\n        } else if (nodeIndex === part.index) {\n          this._parts.push(this._partCallback(this, part, node));\n          partIndex++;\n        } else {\n          nodeIndex++;\n          if (node.nodeName === \"TEMPLATE\") {\n            _prepareInstance((node as HTMLTemplateElement).content);\n          }\n          node = walker.nextNode();\n        }\n      }\n    };\n    _prepareInstance(fragment);\n    return fragment;\n  }\n}\n\nexport const reparentNodes = (\n  container: Node,\n  start: Node | null,\n  end: Node | null = null,\n  before: Node | null = null\n): void => {\n  let node = start;\n  while (node !== end) {\n    const n = node!.nextSibling;\n    container.insertBefore(node!, before as Node);\n    node = n;\n  }\n};\n\nexport const removeNodes = (\n  container: Node,\n  startNode: Node | null,\n  endNode: Node | null = null\n): void => {\n  let node = startNode;\n  while (node !== endNode) {\n    const n = node!.nextSibling;\n    container.removeChild(node!);\n    node = n;\n  }\n};\n"]}